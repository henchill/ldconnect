#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ldconnect:server');
var http = require('http');
var https = require("https");
var fs = require("fs");

var constants = require("../lib/constants.js");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

function getCredentials() {
	if (!constants.SERVER_CERT && !constants.SERVER_KEY) {
		throw new Error("Missing SSL cert and SSL key to enable WebID");
	}

	if (constants.SERVER_CERT && !constants.SERVER_KEY) {
		throw new Error("Missing path for SSL key");
	}

	if (!constants.SERVER_CERT && constants.SERVER_KEY) {
		throw new Error("Missing path for SSL cert");
	}

	var key;
	try {
		key = fs.readFileSync(constants.SERVER_KEY);
	} catch(e) {
		throw new Error("Can't find SSL key in " + e + constants.SERVER_KEY);
	}

	var cert;
	try {
		cert = fs.readFileSync(constants.SERVER_CERT);
	} catch(e) {
		throw new Error("Can't find SSL cert in " + e + constants.SERVER_CERT);
	}

	var credentials = {
		key: key,
		cert: cert,
		requestCert: true
	};
	return credentials;
}

var server = https.createServer(getCredentials(), app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
